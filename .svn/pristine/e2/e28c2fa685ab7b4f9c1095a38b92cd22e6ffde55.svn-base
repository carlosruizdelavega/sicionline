package pe.gob.reniec.actacelebracion.controller;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import pe.gob.reniec.actacelebracion.bean.AniBean;
import pe.gob.reniec.actacelebracion.bean.ContrayenteBean;
import pe.gob.reniec.actacelebracion.bean.GeneroBean;
import pe.gob.reniec.actacelebracion.bean.ResultadoBean;
import pe.gob.reniec.actacelebracion.bean.TipoDocIdentidadBean;
import pe.gob.reniec.actacelebracion.bean.TipoEstadoCivilBean;
import pe.gob.reniec.actacelebracion.bean.TipoNacionalidadBean;
import pe.gob.reniec.actacelebracion.bean.UbigeoBean;
import pe.gob.reniec.actacelebracion.service.ActaCelebraService;
import pe.gob.reniec.actacelebracion.service.UtilService;
 
@Controller
public class ContrayenteController {
	
	//definir log
	private static final Logger log = Logger.getLogger(ContrayenteController.class);
	
	@Autowired
	private UtilService utilService;
	
	@Autowired
	private ActaCelebraService actaCelebraService;	

	/**
	 * Metodo que permite devolver la pagina de registro del acta de celebracion
	 * @param req
	 * @param res
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("/cargarRegistroActa.htm")
	public ModelAndView cargarRegistroActa(HttpServletRequest req, 
										   HttpServletResponse res, 
										   HttpSession session) throws Exception {
		
		//consultar lista de tipos de documentos de identidad
		List<TipoDocIdentidadBean> listaTipoDocIdentidad = utilService.listarTipoDocumentoIdentidad();
		
		//consultar lista de tipos de nacionalidad
		List<TipoNacionalidadBean> listaTipoNacionalidad = utilService.listarTipoNacionalidad();
		
		//cargar listas en session
		session.setAttribute("listaTipoDocIdentidad", listaTipoDocIdentidad);
		session.setAttribute("listaTipoNacionalidad", listaTipoNacionalidad);
		
		//retornar ModelAndView
		return new ModelAndView("actaCelebracion/actaCelebracion");

	}
	
	/**
	 * Metodo que permite consultar por DNI los datos de un ciudadano
	 * @param req
	 * @param res
	 * @param session
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/obtenerDatosAniPorDni.htm")
	public @ResponseBody 
	AniBean consultarPorDniAni (HttpServletRequest req, 
								HttpServletResponse res, 
								HttpSession session) throws Exception {
		
		log.info("Ingresa a metodo consultarPorDniAni");	
		String dni = req.getParameter("dni") == null ? "" : req.getParameter("dni");
		String tipoContrayente = req.getParameter("rolCiudadano") == null ? "" : req.getParameter("rolCiudadano");
		log.info("dni:"+dni);
		AniBean aniBean =utilService.buscarPorDniAni(dni);
		String fechaNacDni = aniBean.getFeNacimiento();
		aniBean.setEdad(utilService.calcularEdadDni(fechaNacDni));
		aniBean.setCoNacionalidad("01");
		GeneroBean generoBean = utilService.obtenerGeneroDni(aniBean.getCoGenero());
		aniBean.setDeGenero(generoBean.getDeSexo());
		UbigeoBean ubigeoBean = new UbigeoBean();
		
		ubigeoBean = utilService.obtenerDescripcionUbigeo(aniBean.getCoContinenteNaci(), 
														  aniBean.getCoPaisNaci(), 
														  aniBean.getCoDepartamentoNaci(),
														  aniBean.getCoProvinciaNaci(), 
														  aniBean.getCoDistritoNaci(), 
														  aniBean.getCoCentropobladoNaci());
		
		aniBean.setDeUbigeoNac(ubigeoBean.getDeUbigeo());
		
		ubigeoBean = utilService.obtenerDescripcionUbigeo(aniBean.getCoContinenteDomicilio(), 
														  aniBean.getCoPaisDomicilio(), 
														  aniBean.getCoDepartamentoDomicilio(),
				 										  aniBean.getCoProvinciaDomicilio(), 
				 										  aniBean.getCoDistritoDomicilio(), 
				 										  aniBean.getCoCentropobladoDomicilio());
		
		aniBean.setDeUbigeoDom(ubigeoBean.getDeUbigeo());
		
		TipoEstadoCivilBean tipoEstadoCivilBean = utilService.obtenerDescripcionEstadoCivil(aniBean.getCoEstadoCivil());
		
		aniBean.setDeEstadoCivil(tipoEstadoCivilBean.getDeEstadoCivil());		
		
		session.setAttribute("aniBeanCon"+tipoContrayente, aniBean);
		return aniBean;
		
	}
	
	/**
	 * Metodo que devuelve la pagina correspondiente al tab de contrayente
	 * @param req
	 * @param res
	 * @return
	 * @throws Exception
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping("/cargarTabContrayente.htm")
    public ModelAndView cargarTabContrayente(HttpServletRequest req, 
    										 HttpServletResponse res,
    										 HttpSession session) throws Exception {
		
		//consulta listados de sesion
		List<TipoDocIdentidadBean> listaTipoDocIdentidad = 
				(List<TipoDocIdentidadBean>) session.getAttribute("listaTipoDocIdentidad");
		List<TipoNacionalidadBean> listaTipoNacionalidad = 
				(List<TipoNacionalidadBean>) session.getAttribute("listaTipoNacionalidad");
		
		//definir ModelAndView
		ModelAndView mv = new ModelAndView("actaCelebracion/actaCelebracion_contrayentes");
		
		//setear atributos de la vista
		mv.addObject("listaTipoDocIdentidad", listaTipoDocIdentidad);
		mv.addObject("listaTipoNacionalidad", listaTipoNacionalidad);
		
		//retornar ModelAndView
		return mv;

	}	
	
	/**
	 * Metodo que permite verificar por DNI si existe los datos de un ciudadano en el ANI
	 * @param req
	 * @param res
	 * @param session
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/consultarPorDniAniIndex.htm")
	public @ResponseBody 
	AniBean consultarPorDniAniIndex (HttpServletRequest req, 
									 HttpServletResponse res, 
									 HttpSession session) throws Exception {
		
		//recibir dni
		String dni = req.getParameter("dni") == null ? "" : req.getParameter("dni");
		
		//verificar si DNI existe
		int existeDni= utilService.verificarExisteDni(dni);
		
		//definir bean
		AniBean aniBean = new AniBean();
		
		//verificar resultado de verificacion
		if (existeDni == 1){
		
			//buscar datos del ANI
			aniBean = utilService.buscarPorDniIndex(dni);
			 
		} else {
			
			aniBean.setExisteDni(false);
		}
		
		//retornar bean
		return aniBean;
		
	}
	
	/**
	 * Metodo que permite generar acta de celebracion
	 * @param req
	 * @param res
	 * @param session
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/registrarContrayente.htm", method = RequestMethod.POST)
	public @ResponseBody ResultadoBean registrarContrayente(HttpServletRequest req, 
															HttpServletResponse res, 
															HttpSession session) throws Exception {
		
		String NroDocumento01 = req.getParameter("NroDocumento01") == null ? "" : req.getParameter("NroDocumento01");
		String ApPrimer01 = req.getParameter("ApPrimer01") == null ? "" : req.getParameter("ApPrimer01");
		String ApSegundo01 = req.getParameter("ApSegundo01") == null ? "" : req.getParameter("ApSegundo01");
		String PreNomInscrito01 = req.getParameter("PreNomInscrito01") == null ? "" : req.getParameter("PreNomInscrito01");
		String Edad01 = req.getParameter("Edad01") == null ? "" : req.getParameter("Edad01");
		String DeDomicilio01 = req.getParameter("DeDomicilio01") == null ? "" : req.getParameter("DeDomicilio01");
		String CoNacionalidad01 = req.getParameter("CoNacionalidad01") == null ? "" : req.getParameter("CoNacionalidad01");
		String CoContinenteNaci01 = req.getParameter("CoContinenteNaci01") == null ? "" : req.getParameter("CoContinenteNaci01");
		String CoPaisNaci01 = req.getParameter("CoPaisNaci01") == null ? "" : req.getParameter("CoPaisNaci01");
		String CoDepartamentoNaci01 = req.getParameter("CoDepartamentoNaci01") == null ? "" : req.getParameter("CoDepartamentoNaci01");
		String CoProvinciaNaci01 = req.getParameter("CoProvinciaNaci01") == null ? "" : req.getParameter("CoProvinciaNaci01");
		String CoDistritoNaci01 = req.getParameter("CoDistritoNaci01") == null ? "" : req.getParameter("CoDistritoNaci01");
		String CoCentropobladoNaci01 = req.getParameter("CoCentropobladoNaci01") == null ? "" : req.getParameter("CoCentropobladoNaci01");
		String CoContinenteDomicilio01 = req.getParameter("CoContinenteDomicilio01") == null ? "" : req.getParameter("CoContinenteDomicilio01");
		String CoPaisDomicilio01 = req.getParameter("CoPaisDomicilio01") == null ? "" : req.getParameter("CoPaisDomicilio01");
		String CoDepartamentoDomicilio01 = req.getParameter("CoDepartamentoDomicilio01") == null ? "" : req.getParameter("CoDepartamentoDomicilio01");
		String CoProvinciaDomicilio01 = req.getParameter("CoProvinciaDomicilio01") == null ? "" : req.getParameter("CoProvinciaDomicilio01");
		String CoDistritoDomicilio01 = req.getParameter("CoDistritoDomicilio01") == null ? "" : req.getParameter("CoDistritoDomicilio01");
		String CoCentropobladoDomicilio01 = req.getParameter("CoCentropobladoDomicilio01") == null ? "" : req.getParameter("CoCentropobladoDomicilio01");
		String CoEstadoCivil01 = req.getParameter("CoEstadoCivil01") == null ? "" : req.getParameter("CoEstadoCivil01");
		String CoGenero01 = req.getParameter("CoGenero01") == null ? "" : req.getParameter("CoGenero01");
		String TipoDocumento01 = req.getParameter("TipoDocumento01") == null ? "" : req.getParameter("TipoDocumento01");
		
		
		String usuario = (String) session.getAttribute("coUsuario") == null ? "" : (String) session.getAttribute("coUsuario");
		
		String NroDocumento02 = req.getParameter("NroDocumento02") == null ? "" : req.getParameter("NroDocumento02");
		String ApPrimer02 = req.getParameter("ApPrimer02") == null ? "" : req.getParameter("ApPrimer02");
		String ApSegundo02 = req.getParameter("ApSegundo02") == null ? "" : req.getParameter("ApSegundo02");
		String PreNomInscrito02 = req.getParameter("PreNomInscrito02") == null ? "" : req.getParameter("PreNomInscrito02");
		String Edad02 = req.getParameter("Edad02") == null ? "" : req.getParameter("Edad02");
		String DeDomicilio02 = req.getParameter("DeDomicilio02") == null ? "" : req.getParameter("DeDomicilio02");
		String CoNacionalidad02 = req.getParameter("CoNacionalidad02") == null ? "" : req.getParameter("CoNacionalidad02");
		String CoContinenteNaci02 = req.getParameter("CoContinenteNaci02") == null ? "" : req.getParameter("CoContinenteNaci02");
		String CoPaisNaci02 = req.getParameter("CoPaisNaci02") == null ? "" : req.getParameter("CoPaisNaci02");
		String CoDepartamentoNaci02 = req.getParameter("CoDepartamentoNaci02") == null ? "" : req.getParameter("CoDepartamentoNaci02");
		String CoProvinciaNaci02 = req.getParameter("CoProvinciaNaci02") == null ? "" : req.getParameter("CoProvinciaNaci02");
		String CoDistritoNaci02 = req.getParameter("CoDistritoNaci02") == null ? "" : req.getParameter("CoDistritoNaci02");
		String CoCentropobladoNaci02 = req.getParameter("CoCentropobladoNaci02") == null ? "" : req.getParameter("CoCentropobladoNaci02");
		String CoContinenteDomicilio02 = req.getParameter("CoContinenteDomicilio02") == null ? "" : req.getParameter("CoContinenteDomicilio02");
		String CoPaisDomicilio02 = req.getParameter("CoPaisDomicilio02") == null ? "" : req.getParameter("CoPaisDomicilio02");
		String CoDepartamentoDomicilio02 = req.getParameter("CoDepartamentoDomicilio02") == null ? "" : req.getParameter("CoDepartamentoDomicilio02");
		String CoProvinciaDomicilio02 = req.getParameter("CoProvinciaDomicilio02") == null ? "" : req.getParameter("CoProvinciaDomicilio02");
		String CoDistritoDomicilio02 = req.getParameter("CoDistritoDomicilio02") == null ? "" : req.getParameter("CoDistritoDomicilio02");
		String CoCentropobladoDomicilio02 = req.getParameter("CoCentropobladoDomicilio02") == null ? "" : req.getParameter("CoCentropobladoDomicilio02");
		String CoEstadoCivil02 = req.getParameter("CoEstadoCivil02") == null ? "" : req.getParameter("CoEstadoCivil02");
		String CoGenero02 = req.getParameter("CoGenero02") == null ? "" : req.getParameter("CoGenero02");
		String TipoDocumento02 = req.getParameter("TipoDocumento02") == null ? "" : req.getParameter("TipoDocumento02");
		
		
		 ContrayenteBean contrayenteBean01 = new ContrayenteBean();
		 
		 contrayenteBean01.setCoContrayente("01");
		 
		 contrayenteBean01.setIdCrea(usuario);
		 contrayenteBean01.setNuDocIdentidad(NroDocumento01);
		 contrayenteBean01.setDePrimerApellido(ApPrimer01);
		 contrayenteBean01.setDeSegundoApellido(ApSegundo01);
		 contrayenteBean01.setDePrenombres(PreNomInscrito01);
		 contrayenteBean01.setNuEdad(Edad01);
		 contrayenteBean01.setDeDireccion(DeDomicilio01);
		 contrayenteBean01.setCoNacionalidad(CoNacionalidad01);
		 contrayenteBean01.setCoNaturalCont(CoContinenteNaci01);
		 contrayenteBean01.setCoNaturalPais(CoPaisNaci01);
		 contrayenteBean01.setCoNaturalDpto(CoDepartamentoNaci01);
		 contrayenteBean01.setCoNaturalProv(CoProvinciaNaci01);
		 contrayenteBean01.setCoNaturalDist(CoDistritoNaci01);
		 contrayenteBean01.setCoNaturalLoca(CoCentropobladoNaci01);
		 contrayenteBean01.setCoDomCont(CoContinenteDomicilio01);
		 contrayenteBean01.setCoDomPais(CoPaisDomicilio01);
		 contrayenteBean01.setCoDomDpto(CoDepartamentoDomicilio01);
		 contrayenteBean01.setCoDomProv(CoProvinciaDomicilio01);
		 contrayenteBean01.setCoDomDist(CoDistritoDomicilio01);
		 contrayenteBean01.setCoDomLoca(CoCentropobladoDomicilio01);
		 contrayenteBean01.setCoEstadoCivil(CoEstadoCivil01);
		 contrayenteBean01.setCoSexo(CoGenero01);
		 contrayenteBean01.setCoTipoDocIdentidad(TipoDocumento01);
		 
		 ContrayenteBean contrayenteBean02 = new ContrayenteBean();
		 
		 contrayenteBean02.setCoContrayente("02");
		 contrayenteBean02.setIdCrea(usuario);
		 contrayenteBean02.setNuDocIdentidad(NroDocumento02);
		 contrayenteBean02.setDePrimerApellido(ApPrimer02);
		 contrayenteBean02.setDeSegundoApellido(ApSegundo02);
		 contrayenteBean02.setDePrenombres(PreNomInscrito02);
		 contrayenteBean02.setNuEdad(Edad02);
		 contrayenteBean02.setDeDireccion(DeDomicilio02);
		 contrayenteBean02.setCoNacionalidad(CoNacionalidad02);
		 contrayenteBean02.setCoNaturalCont(CoContinenteNaci02);
		 contrayenteBean02.setCoNaturalPais(CoPaisNaci02);
		 contrayenteBean02.setCoNaturalDpto(CoDepartamentoNaci02);
		 contrayenteBean02.setCoNaturalProv(CoProvinciaNaci02);
		 contrayenteBean02.setCoNaturalDist(CoDistritoNaci02);
		 contrayenteBean02.setCoNaturalLoca(CoCentropobladoNaci02);
		 contrayenteBean02.setCoDomCont(CoContinenteDomicilio02);
		 contrayenteBean02.setCoDomPais(CoPaisDomicilio02);
		 contrayenteBean02.setCoDomDpto(CoDepartamentoDomicilio02);
		 contrayenteBean02.setCoDomProv(CoProvinciaDomicilio02);
		 contrayenteBean02.setCoDomDist(CoDistritoDomicilio02);
		 contrayenteBean02.setCoDomLoca(CoCentropobladoDomicilio02);
		 contrayenteBean02.setCoEstadoCivil(CoEstadoCivil02);
		 contrayenteBean02.setCoSexo(CoGenero02);
		 contrayenteBean02.setCoTipoDocIdentidad(TipoDocumento02);
		 
		ResultadoBean resultadoBean =  actaCelebraService.registrarContrayente(contrayenteBean01, contrayenteBean02, usuario);
		
		//cargar numero de acta de celebracion en sesion
		session.setAttribute("numeroActaCelebra", resultadoBean.getNumeroActaCelebra());
		
		//retornar bean
		return resultadoBean;
	
	}
	
	
}
